version: 2.1

orbs:
  aws-cli: circleci/aws-cli@0.1.9
  aws_assume_role: lbh-hackit/aws_assume_role@0.1.0

executors:
  docker-python:
      docker:
        - image: circleci/python:3.7
  docker-dotnet:
     docker:
        - image: mcr.microsoft.com/dotnet/core/sdk:3.1

references:
  workspace_root: &workspace_root "~"
  attach_workspace: &attach_workspace
    attach_workspace:
      at: *workspace_root

commands:
  assume-role-and-persist-workspace:
    description: "assumes deployment role and persists credentials across jobs"
    parameters:
      aws-account:
        type: string
    steps:
      - checkout
      - aws_assume_role/assume_role:
          account: <<parameters.aws-account>>
          profile_name: default
          role: 'LBH_Circle_CI_Deployment_Role'
      - persist_to_workspace:
          root: *workspace_root
          paths:
            - .aws
  deploy-lambda:
    description: "Deploys API via Serverless"
    parameters:
      stage:
        type: string
    steps:
      - *attach_workspace
      - checkout
      - setup_remote_docker
      - run:
          name: Install Node.js
          command: |
            curl -sL https://deb.nodesource.com/setup_18.x | bash -
            apt-get update && apt-get install -y nodejs
      - run:
          name: Install serverless CLI
          command: npm i -g serverless@^3
      - run:
          name: Deploy lambda
          command: |
            cd ./ResidentVulnerabilitiesDataPipeline/
            if [ "<<parameters.stage>>" = "staging" ]
            then
              sls remove --stage <<parameters.stage>> --verbose
            else
              sls deploy --stage <<parameters.stage>> --conceal
            fi

jobs:
  assume-role-development:
    executor: docker-python
    steps:
      - assume-role-and-persist-workspace:
          aws-account: $AWS_ACCOUNT_DEVELOPMENT
  assume-role-staging:
    executor: docker-python
    steps:
      - assume-role-and-persist-workspace:
          aws-account: $AWS_ACCOUNT_STAGING
  assume-role-production:
    executor: docker-python
    steps:
      - assume-role-and-persist-workspace:
          aws-account: $AWS_ACCOUNT_PRODUCTION
  deploy-to-development:
    executor: docker-dotnet
    steps:
      - deploy-lambda:
          stage: 'development'
  deploy-to-staging:
    executor: docker-dotnet
    steps:
      - deploy-lambda:
          stage: 'staging'
  deploy-to-production:
    executor: docker-dotnet
    steps:
      - deploy-lambda:
          stage: 'production'

workflows:
  deploy-staging-and-production:
    jobs:
      - permit-development-release:
          type: approval
          filters:
            branches:
              only: master
      - assume-role-development:
          context: api-assume-role-development-context
          requires:
            - permit-development-release
          filters:
            branches:
              only: master
      - deploy-to-development:
          requires:
            - assume-role-development
          filters:
            branches:
              only: master

      - permit-staging-release:
          type: approval
          filters:
            branches:
              only: master
      - assume-role-staging:
          context: api-assume-role-staging-context
          requires:
              - permit-staging-release
          filters:
             branches:
               only: master
      - deploy-to-staging:
          requires:
            - assume-role-staging
          filters:
            branches:
              only: master

      - permit-production-release:
          type: approval
          filters:
            branches:
              only: master
      - assume-role-production:
          context: api-assume-role-production-context
          requires:
              - permit-production-release
          filters:
             branches:
               only: master
      - deploy-to-production:
          requires:
            - assume-role-production
          filters:
            branches:
              only: master
